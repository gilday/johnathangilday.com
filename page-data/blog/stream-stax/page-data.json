{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/stream-stax/","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Johnathan Gilday"},"blogTitle":"/ gilday / blog"}},"markdownRemark":{"id":"c1bc6163-34a5-5254-82ba-b03939f15bcd","excerpt":"I recently had to process large XML documents in Java, so I reached for Java’s\nStreaming API for XML (StAX). The document had a long list of relatively small…","html":"<p>I recently had to process large XML documents in Java, so I reached for Java’s\nStreaming API for XML (StAX). The document had a long list of relatively small\nelements. Java’s new switch expressions made parsing the XML with StAX much\nnicer than I remembered; however, I found myself missing the filtering,\ntransformation, and aggregation methods from <code class=\"language-text\">java.util.stream.Stream</code>.</p>\n<p>I wanted to use StAX to parse the XML elements into a Java record, and I wanted\nto use a <code class=\"language-text\">Stream</code> to process those records. In this blog post, I detail how to\ndo that efficiently.</p>\n<h2>Parsing All the Sandwiches</h2>\n<p>Consider an arbitrarily large XML document containing a list of favorite\nsandwiches. Of course, we could parse all the favorite sandwiches into a\n<code class=\"language-text\">java.util.Collection</code> then call <code class=\"language-text\">stream()</code>. However, we know this is not\nefficient, because it requires the JVM to hold all the data from the large XML\ndocument in memory.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 🤢 Inefficient, because it reads all the records into memory before processing</span>\n<span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span></span> sandwiches <span class=\"token operator\">=</span> <span class=\"token function\">parseAllSandwiches</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"./sandwiches.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Stream</span> sandwichesStream <span class=\"token operator\">=</span> sandwiches<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead, we want a <code class=\"language-text\">Stream</code> that parses the XML data as-needed. To build such a\nstream, we define a new type that implements <code class=\"language-text\">java.util.stream.Spliterator</code>\ninterface. A <code class=\"language-text\">Spliterator</code> is the <code class=\"language-text\">java.util.stream</code> equivalent of a cursor, and\nit facilitates making new <code class=\"language-text\">Stream</code> instances from data that can be iterated on\nand optionally partitioned. In this example, the XML data is given to the\n<code class=\"language-text\">Spliterator</code> as an <code class=\"language-text\">InputStream</code>, so it cannot be partitioned.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FavoriteSandwichXMLSpliterator</span>\n    <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Spliterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">XMLEventReader</span> reader<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">FavoriteSandwichXMLSpliterator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      reader <span class=\"token operator\">=</span> factory<span class=\"token punctuation\">.</span><span class=\"token function\">createXMLEventReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XMLStreamException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IOException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to parse favorite sandwiches from XML\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>The <code class=\"language-text\">Spliterator</code> parses the XML as-needed in its <code class=\"language-text\">tryAdvance</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">tryAdvance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Consumer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">super</span> <span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span></span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>reader<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">XMLEvent</span> event<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      event <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">nextEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XMLStreamException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UncheckedXMLStreamException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read favorite sandwiches from XML\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span><span class=\"token function\">isStartElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">final</span> <span class=\"token class-name\">StartElement</span> startElement <span class=\"token operator\">=</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">asStartElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>startElement<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLocalPart</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"favorite-sandwich\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">final</span> <span class=\"token class-name\">FavoriteSandwich</span> sandwich<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n          sandwich <span class=\"token operator\">=</span> <span class=\"token function\">readSandwich</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// implementation omitted for brevity</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XMLStreamException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UncheckedXMLStreamException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to read favorite sandwich from XML\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        action<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>sandwich<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The remaining methods of the <code class=\"language-text\">Spliterator</code> interface return values that\ncommunicate to the <code class=\"language-text\">Stream</code> that we do not know how long the <code class=\"language-text\">Stream</code> is and it\ncannot be partitioned. Finally, all this is encapsulated in a factory method\nthat returns a new <code class=\"language-text\">Stream</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">var</span> spliterator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FavoriteSandwichXMLSpliterator</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">StreamSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>spliterator<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This factory method provides the <code class=\"language-text\">Stream&lt;FavoriteSandwich></code> that developers want\nto use while encapsulating the XML parsing that developers do not want to think\nabout. For example, it’s now incredibly simple to compute a count of favorite\nsandwiches by the U.S. state they’re from:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">stream_all_valid_sandwiches</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token class-name\">FavoriteSandwichXMLParser</span> reader <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FavoriteSandwichXMLParser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> is <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">FavoriteSandwichXMLParserTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/favorite-sandwiches.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> sandwiches <span class=\"token operator\">=</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> countByState <span class=\"token operator\">=</span>\n        sandwiches<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>\n            <span class=\"token function\">groupingBy</span><span class=\"token punctuation\">(</span>sandwich <span class=\"token operator\">-></span> sandwich<span class=\"token punctuation\">.</span><span class=\"token function\">restaurant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">state</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">counting</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">final</span> <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> expected <span class=\"token operator\">=</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"NJ\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2L</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MD\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">assertThat</span><span class=\"token punctuation\">(</span>countByState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">containsExactlyInAnyOrderEntriesOf</span><span class=\"token punctuation\">(</span>expected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Perfect! 🥪</p>\n<h2>Resource Management Special Case</h2>\n<p>In the previous example, the <code class=\"language-text\">Stream&lt;FavoriteSandwich></code> data was processed\nentirely within a try-with-resources statement that ensures the <code class=\"language-text\">InputStream</code>\nwill be closed. While this is ideal, it may not always be possible to manage the\nIO resources this way. For example, consider the case where some existing method\nexpects a <code class=\"language-text\">Supplier&lt;Stream&lt;FavoriteSandwich>></code>. In this case, the <code class=\"language-text\">Supplier</code>\ncannot use try-with-resources, because it cannot know when to close the\n<code class=\"language-text\">InputStream</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 🐛 Will close the InputStream before any code can operate on the Stream</span>\n<span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> supplier <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> is <span class=\"token operator\">=</span>\n      <span class=\"token class-name\">FavoriteSandwichXMLParserTest</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/favorite-sandwiches.xml\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> reader<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UncheckedIOException</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Instead, we want to clean-up the resources when the <code class=\"language-text\">Stream</code> has been closed.\nFortunately, <code class=\"language-text\">Stream</code> implements <code class=\"language-text\">AutoCloseable</code>, and the\n<a href=\"https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/stream/Stream.html\">Stream Javadoc</a>\ninstructs users to close streams that are backed by an IO channel.</p>\n<blockquote>\n<p>Streams have a BaseStream.close() method and implement AutoCloseable, but\nnearly all stream instances do not actually need to be closed after use.\nGenerally, only streams whose source is an IO channel (such as those returned\nby Files.lines(Path, Charset)) will require closing. Most streams are backed\nby collections, arrays, or generating functions, which require no special\nresource management. (If a stream does require closing, it can be declared as\na resource in a try-with-resources statement.)</p>\n</blockquote>\n<p>We can take advantage of this to handle this special case where the <code class=\"language-text\">Stream</code>\nmust clean-up the IO channel it encapsulates.</p>\n<p>First, we make the <code class=\"language-text\">FavoriteSandwichXMLSpliterator</code> implement <code class=\"language-text\">AutoCloseable</code>.\nThe <code class=\"language-text\">close()</code> method simply closes the <code class=\"language-text\">InputStream</code> passed to the constructor\nand propagates any exceptions as a <code class=\"language-text\">RuntimeException</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Override</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    reader<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">XMLStreamException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UncheckedXMLStreamException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Failed to close XMLEventReader\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, we define a new runtime exception <code class=\"language-text\">UncheckedXMLStreamException</code>\nthat is the StAX analog to <code class=\"language-text\">UncheckedIOException</code>.</p>\n<p>Lastly, we change the factory that creates the <code class=\"language-text\">Stream</code>, so that the <code class=\"language-text\">Stream</code>\ncloses the <code class=\"language-text\">Spliterator</code> when it has been closed. This is made possible by the\n<code class=\"language-text\">Stream.onClose(Runnable)</code> method that allows users to schedule arbitrary\nroutines to be executed when the <code class=\"language-text\">Stream</code> is closed.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">InputStream</span> is<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">final</span> <span class=\"token keyword\">var</span> spliterator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FavoriteSandwichXMLSpliterator</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token class-name\">StreamSupport</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span>spliterator<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">onClose</span><span class=\"token punctuation\">(</span>spliterator<span class=\"token operator\">::</span><span class=\"token function\">close</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Having made these changes, the <code class=\"language-text\">Stream</code> itself may be in a try-with-resources to\nensure that the IO is closed properly:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">void</span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Supplier</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Stream</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FavoriteSandwich</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> supplier<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> sandwiches <span class=\"token operator\">=</span> supplier<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sandwiches<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token operator\">::</span><span class=\"token function\">println</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>Arbitrarily large streams of data, such as a large XML document, are ripe for\nprocessing with the <code class=\"language-text\">java.util.stream</code> APIs, but developers need way to parse\nrecords from the stream as-needed and expose those elements as a <code class=\"language-text\">Stream</code>. The\n<code class=\"language-text\">Spliterator</code> interface is the key that unlocks the power of the <code class=\"language-text\">Stream</code> API\nfor data that may be processed stream-wise. Additionally, when the <code class=\"language-text\">Stream</code> must\nalso clean-up the underlying IO resources after it has been exhausted, the\n<code class=\"language-text\">Stream.onClose(Runnable)</code> method is available to schedule that clean-up.</p>\n<p>The accompanying code may be found at\n<a href=\"https://github.com/gilday/how-to-stream-stax\">gilday/how-to-stream-stax</a>.</p>","frontmatter":{"title":"☕️ Connecting Java's Streaming API for XML (StAX) with Streams","date":"December 15, 2022","description":"On one hand, Java developers love to work with streams of data using the `java.util.stream` package, because it is easy to apply transformations, filtering, and aggregation. On the other hand, the Streaming API for XML (StAX) makes reading XML streamwise easy, but there are no easy ways to filter, transform, and aggregate the data. How can a Java developer connect these two APIs to use the best of both?\n"}}},"pageContext":{"slug":"/blog/stream-stax/","previous":{"fields":{"slug":"/blog/maven-toolchain-tests/","sourceName":"blog"},"frontmatter":{"title":"🦉 Testing Across JDKs with Maven Toolchains"}},"next":null}},"staticQueryHashes":["2841359383","614056702"]}