{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/macos-homebrew-openjdk/","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Johnathan Gilday"},"blogTitle":"/ gilday / blog"}},"markdownRemark":{"id":"3a34bedb-0434-5794-9757-f2b36bdac7c1","excerpt":"Update 2021-10-13: AdoptOpenJDK has migrated to the Eclipse Foundation and is\nnow Temurin. This post has been updated to reflect this migration. Changes to how…","html":"<p><strong>Update 2021-10-13: AdoptOpenJDK has migrated to the Eclipse Foundation and is\nnow Temurin. This post has been updated to reflect this migration.</strong></p>\n<p>Changes to how Java is released and licensed may have macOS users feeling more\nlost than usual when considering their options for installing the JDK. Given the\nlicensing changes Oracle made to Java after version 1.8, using Oracle’s\ninstaller may not always be an option. With Java’s new six-month release cycle,\ndevelopers are more likely to need a handful of different versions of the JDK\ninstalled. In this post, I explain how I use Homebrew to install Eclipse Temurin\npackages and manage multiple versions of Java with built-in shell tools.</p>\n<h2>Installing Java</h2>\n<ol>\n<li>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/install/mac_jdk.html#A1096903\">Uninstall any existing JDKs</a>.</p>\n<p>Execute <code class=\"language-text\">java -version</code> to double-check that Java is truly gone from the\nenvironment.</p>\n</li>\n<li>\n<p>Add the Cask Versions Tap. This is necessary to install previous releases.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">brew tap homebrew/cask-versions</code></pre></div>\n</li>\n<li>\n<p>Find the Eclipse Temurin HomeBrew packages for the versions of Java you need</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">brew search temurin</code></pre></div>\n</li>\n<li>\n<p>Install the JDK versions you need e.g.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">brew <span class=\"token function\">install</span> --cask temurin11</code></pre></div>\n</li>\n<li>\n<p>Configure <code class=\"language-text\">JAVA_HOME</code> in your shell with the default version of Java. This\nguide assumes you use ZSH because that is the default shell since macOS\nCatalina</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"> <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>/usr/libexec/java_home -v <span class=\"token number\">11</span><span class=\"token variable\">)</span></span>\n <span class=\"token assign-left variable\">path</span><span class=\"token operator\">+=</span><span class=\"token variable\">$JAVA_HOME</span>/bin</code></pre></div>\n</li>\n<li>\n<p>Reload the shell configuration confirm that Java works</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">.</span> ~/.zshrc\njava -version</code></pre></div>\n</li>\n</ol>\n<h2>Switching Java Versions</h2>\n<p>Users can install multiple JDKs by installing multiple Temurin HomeBrew\npackages. The macOS program <code class=\"language-text\">/usr/libexec/java_home</code> helps users configure their\n<code class=\"language-text\">JAVA_HOME</code> environment variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># switches to JDK 14</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>/usr/libexec/java_home -v <span class=\"token number\">14</span><span class=\"token variable\">)</span></span></code></pre></div>\n<p>There is no need to update the <code class=\"language-text\">PATH</code> variable. The ZSH <code class=\"language-text\">path</code> array will\nautomatically update to reflect the changes to the <code class=\"language-text\">JAVA_HOME</code> variable.</p>\n<p>This command may be too verbose to type every time, so the\n<a href=\"https://github.com/AdoptOpenJDK/homebrew-openjdk\">HomeBrew AdoptOpenJDK Tap README recommends adding this function to your shell configuration to succinctly switch your JDK version</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function-name function\">jdk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n    <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>/usr/libexec/java_home -v<span class=\"token string\">\"<span class=\"token variable\">$version</span>\"</span><span class=\"token variable\">)</span></span><span class=\"token punctuation\">;</span>\n    java -version\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Automatically Switching Java Versions</h3>\n<p>The command <code class=\"language-text\">jdk 1.8</code> is succinct, but you still need to remember to type it\nwhen switching between a handful of different projects. To save yourself the\ntrouble of remembering, you can configure your shell to automatically update\n<code class=\"language-text\">JAVA_HOME</code> whenever you change to your project’s directory. This is a popular\nfeature in shell scripts like <a href=\"https://www.jenv.be/\">jenv</a> and\n<a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/tips.html#automatically-run-workon-when-entering-a-directory\">virtualenv</a>.\nFortunately, this feature is incredibly easy to emulate with some ZSH\nconfiguration.</p>\n<p>First, in your project’s root directory, store the version of Java the project\nrequires in a new <code class=\"language-text\">.java-version</code> file. The name <code class=\"language-text\">.java-version</code> is significant\nonly because this is the same name that the analogous jenv feature uses, and\nusing a common name helps share this configuration with any jenv users that\ncontribute to your project.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1.8</span> <span class=\"token operator\">></span> .java-version</code></pre></div>\n<p>Next, we need to add a hook to our ZSH configuration that will look for and act\non this file whenever the shell changes directories. Add the following to\n<code class=\"language-text\">$HOME/.zshrc</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># automatic java_home switch when .java-version detected</span>\n<span class=\"token keyword\">function</span> <span class=\"token function-name function\">chpwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> -f <span class=\"token environment constant\">$PWD</span>/.java-version <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n    <span class=\"token assign-left variable\">version</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span><span class=\"token function\">cat</span> <span class=\"token environment constant\">$PWD</span>/.java-version<span class=\"token variable\">)</span></span>\n    <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">JAVA_HOME</span><span class=\"token operator\">=</span><span class=\"token variable\"><span class=\"token variable\">$(</span>/usr/libexec/java_home -v $version<span class=\"token variable\">)</span></span>\n  <span class=\"token keyword\">fi</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Lastly, reload your ZSH configuration and test it out</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token comment\"># create two test project directories</span>\n<span class=\"token function\">mkdir</span> java-8-project java-11-project\n\n<span class=\"token comment\"># configure each test project directory to use a different version of Java</span>\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">1.8</span> <span class=\"token operator\">></span> java-8-project/.java-version\n<span class=\"token builtin class-name\">echo</span> <span class=\"token number\">11</span> <span class=\"token operator\">></span> java-11-project/.java-version\n\n<span class=\"token comment\"># test Java version in java-8-project</span>\n<span class=\"token builtin class-name\">cd</span> java-8-project\njava -version\n\n<span class=\"token comment\"># switch to java-11-project and test Java version</span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token punctuation\">..</span>/java-11-project\njava -version</code></pre></div>\n<h2>Why not use the Oracle installer?</h2>\n<p>Traditionally, the most straightforward way to download Java has always been to\nsearch “download Java” and follow the first link from Oracle to download the\nmacOS installer. Oracle’s macOS installer takes care of installing and\nautomatically updating Java. One of the problems with the installer is that it\nwill insist on upgrading to the latest version of Java. Especially given Java’s\nnew six-month release cycle, upgrading to the latest version is probably too\nvolatile for most large projects.</p>\n<p>The installer is not the only reason you might avoid a Java release from Oracle.\nOracle has made its licensing more restrictive, and you may need a paid\nsubscription to use it. For example, After April 16, 2019, developers can no\nlonger use Oracle’s Java 1.8 release for commercial purposes without buying a\nsubscription.</p>\n<h2>Why Eclipse Temurin?</h2>\n<p>There are a lot of OpenJDK distributions to choose from. The excellent article\n<a href=\"https://medium.com/@javachampions/java-is-still-free-2-0-0-6b9aa8d6d244\">Is Java Still Free</a>\nis the best resource for navigating these choices. The two most important things\nto remember are:</p>\n<ol>\n<li>The open-source project OpenJDK does not distribute binary releases. It makes\nthe OpenJDK source code available for others to build and distribute OpenJDK\ndistributions.</li>\n<li>Companies and organizations that provide OpenJDK distributions differentiate\ntheir offerings primarily through maintenance, support, and added features.</li>\n</ol>\n<p>The average Java developer wants an OpenJDK distribution that is simple, free,\nhas no strings attached, and is easy to install. OpenJDK distributions from the\nEclipse Temurin project fit these criteria well. Temurin, formerly AdoptOpenJDK,\nis part of the Eclipse Foundation and makes OpenJDK distributions freely\navailable. They do not offer commercial support, so they are not trying to\nup-sell developers. Their mission is</p>\n<blockquote>\n<p>Providing the Java community with rock-solid runtimes and associated tools\nthat can be used free of charge, without usage restrictions on a wide range of\nplatforms.</p>\n</blockquote>\n<p>Sounds good to me 😁. Temurin is readily available in Docker images on\n<a href=\"https://hub.docker.com/_/eclipse-temurin\">Docker Hub</a>, in\n<a href=\"https://github.com/AdoptOpenJDK/homebrew-openjdk\">HomeBrew packages</a>, and in\narchives on <a href=\"https://adoptium.net\">adoptium.net</a>.</p>","frontmatter":{"title":"🍎 Installing and Managing Java on macOS","date":"September 07, 2020","description":"Developers on macOS may feel more lost than usual when considering their options for installing Java. In my experience, using Homebrew to install Eclipse Temurin packages is the best general solution for installing Java on macOS.\n"}}},"pageContext":{"slug":"/blog/macos-homebrew-openjdk/","previous":{"fields":{"slug":"/blog/hello-world/","sourceName":"blog"},"frontmatter":{"title":"🎉 Hello World!"}},"next":{"fields":{"slug":"/blog/owasp-xxe-jaxb/","sourceName":"blog"},"frontmatter":{"title":"🔒 XML External Entity Pitfalls With JAXB"}}}},"staticQueryHashes":["2841359383","614056702"]}