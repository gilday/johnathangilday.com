{"version":3,"file":"bdabeea893d1518ba239e869c5bc49b53007694b-80efaf25a81a6ffc7c63.js","mappings":"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","sources":["webpack://johnathangilday/./node_modules/camelcase/index.js","webpack://johnathangilday/./node_modules/typography-breakpoint-constants/dist/index.js","webpack://johnathangilday/./node_modules/typography-theme-sutro/dist/index.js","webpack://johnathangilday/../src/image-utils.ts","webpack://johnathangilday/../src/components/hooks.ts","webpack://johnathangilday/../src/components/picture.tsx","webpack://johnathangilday/../src/components/layout-wrapper.tsx","webpack://johnathangilday/../src/components/placeholder.tsx","webpack://johnathangilday/../src/components/main-image.tsx","webpack://johnathangilday/../src/components/gatsby-image.browser.tsx","webpack://johnathangilday/../src/components/gatsby-image.server.tsx","webpack://johnathangilday/../src/components/static-image.server.tsx","webpack://johnathangilday/../src/components/static-image.tsx","webpack://johnathangilday/./src/components/blog/typography.tsx","webpack://johnathangilday/./src/components/blog/bio.js","webpack://johnathangilday/./src/components/blog/layout.js"],"sourcesContent":["'use strict';\n\nvar preserveCamelCase = function preserveCamelCase(string) {\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < string.length; i++) {\n    var character = string[i];\n\n    if (isLastCharLower && /[a-zA-Z]/.test(character) && character.toUpperCase() === character) {\n      string = string.slice(0, i) + '-' + string.slice(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(character) && character.toLowerCase() === character) {\n      string = string.slice(0, i - 1) + '-' + string.slice(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = character.toLowerCase() === character && character.toUpperCase() !== character;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = character.toUpperCase() === character && character.toLowerCase() !== character;\n    }\n  }\n\n  return string;\n};\n\nvar camelCase = function camelCase(input, options) {\n  if (!(typeof input === 'string' || Array.isArray(input))) {\n    throw new TypeError('Expected the input to be `string | string[]`');\n  }\n\n  options = Object.assign({\n    pascalCase: false\n  }, options);\n\n  var postProcess = function postProcess(x) {\n    return options.pascalCase ? x.charAt(0).toUpperCase() + x.slice(1) : x;\n  };\n\n  if (Array.isArray(input)) {\n    input = input.map(function (x) {\n      return x.trim();\n    }).filter(function (x) {\n      return x.length;\n    }).join('-');\n  } else {\n    input = input.trim();\n  }\n\n  if (input.length === 0) {\n    return '';\n  }\n\n  if (input.length === 1) {\n    return options.pascalCase ? input.toUpperCase() : input.toLowerCase();\n  }\n\n  var hasUpperCase = input !== input.toLowerCase();\n\n  if (hasUpperCase) {\n    input = preserveCamelCase(input);\n  }\n\n  input = input.replace(/^[_.\\- ]+/, '').toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (_, p1) {\n    return p1.toUpperCase();\n  }).replace(/\\d+(\\w|$)/g, function (m) {\n    return m.toUpperCase();\n  });\n  return postProcess(input);\n};\n\nmodule.exports = camelCase; // TODO: Remove this for the next major release\n\nmodule.exports.default = camelCase;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar LARGER_DISPLAY_WIDTH = exports.LARGER_DISPLAY_WIDTH = \"1600px\";\nvar LARGE_DISPLAY_WIDTH = exports.LARGE_DISPLAY_WIDTH = \"1280px\";\nvar DEFAULT_WIDTH = exports.DEFAULT_WIDTH = \"980px\";\nvar TABLET_WIDTH = exports.TABLET_WIDTH = \"768px\";\nvar MOBILE_WIDTH = exports.MOBILE_WIDTH = \"480px\";\nvar LARGER_DISPLAY_MEDIA_QUERY = exports.LARGER_DISPLAY_MEDIA_QUERY = \"@media only screen and (max-width:1600px)\";\nvar LARGE_DISPLAY_MEDIA_QUERY = exports.LARGE_DISPLAY_MEDIA_QUERY = \"@media only screen and (max-width:1280px)\";\nvar DEFAULT_MEDIA_QUERY = exports.DEFAULT_MEDIA_QUERY = \"@media only screen and (max-width:980px)\";\nvar TABLET_MEDIA_QUERY = exports.TABLET_MEDIA_QUERY = \"@media only screen and (max-width:768px)\";\nvar MOBILE_MEDIA_QUERY = exports.MOBILE_MEDIA_QUERY = \"@media only screen and (max-width:480px)\";\nvar MIN_LARGER_DISPLAY_MEDIA_QUERY = exports.MIN_LARGER_DISPLAY_MEDIA_QUERY = \"@media (min-width:1600px)\";\nvar MIN_LARGE_DISPLAY_MEDIA_QUERY = exports.MIN_LARGE_DISPLAY_MEDIA_QUERY = \"@media (min-width:1280px)\";\nvar MIN_DEFAULT_MEDIA_QUERY = exports.MIN_DEFAULT_MEDIA_QUERY = \"@media (min-width:980px)\";\nvar MIN_TABLET_MEDIA_QUERY = exports.MIN_TABLET_MEDIA_QUERY = \"@media (min-width:768px)\";\nvar MIN_MOBILE_MEDIA_QUERY = exports.MIN_MOBILE_MEDIA_QUERY = \"@media (min-width:480px)\";","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _grayPercentage = require(\"gray-percentage\");\n\nvar _grayPercentage2 = _interopRequireDefault(_grayPercentage);\n\nvar _typographyBreakpointConstants = require(\"typography-breakpoint-constants\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar theme = {\n  title: \"Sutro\",\n  baseFontSize: \"18px\",\n  baseLineHeight: 1.78,\n  googleFonts: [{\n    name: \"Open Sans\",\n    styles: [\"700\"]\n  }, {\n    name: \"Merriweather\",\n    styles: [\"300\", \"300i\", \"700\", \"700i\"]\n  }],\n  headerFontFamily: [\"Open Sans\", \"sans-serif\"],\n  bodyFontFamily: [\"Merriweather\", \"Georgia\", \"serif\"],\n  bodyColor: \"hsla(0,0%,0%,0.9)\",\n  headerWeight: 700,\n  bodyWeight: 300,\n  boldWeight: 700,\n  overrideStyles: function overrideStyles(_ref, options) {\n    var _ref2;\n\n    var adjustFontSizeTo = _ref.adjustFontSizeTo,\n        scale = _ref.scale,\n        rhythm = _ref.rhythm;\n    return _ref2 = {\n      a: {\n        color: \"#f92300\",\n        textDecoration: \"none\"\n      },\n      \"a:hover,a:active\": {\n        textDecoration: \"underline\"\n      },\n      blockquote: _extends({}, scale(1 / 5), {\n        color: (0, _grayPercentage2.default)(41),\n        fontStyle: \"italic\",\n        paddingLeft: rhythm(13 / 16),\n        marginLeft: 0,\n        borderLeft: rhythm(3 / 16) + \" solid \" + (0, _grayPercentage2.default)(80)\n      }),\n      \"blockquote > :last-child\": {\n        marginBottom: 0\n      },\n      \"blockquote cite\": _extends({}, adjustFontSizeTo(options.baseFontSize), {\n        color: options.bodyColor,\n        fontWeight: options.bodyWeight\n      }),\n      \"blockquote cite:before\": {\n        content: '\"— \"'\n      },\n      ul: {\n        listStyle: \"disc\"\n      },\n      \"ul,ol\": {\n        marginLeft: 0\n      }\n    }, _defineProperty(_ref2, _typographyBreakpointConstants.MOBILE_MEDIA_QUERY, {\n      \"ul,ol\": {\n        marginLeft: rhythm(1)\n      },\n      blockquote: {\n        marginLeft: rhythm(-3 / 4),\n        marginRight: 0,\n        paddingLeft: rhythm(9 / 16)\n      }\n    }), _defineProperty(_ref2, _typographyBreakpointConstants.TABLET_MEDIA_QUERY, {\n      h1: _extends({}, scale(5 / 5))\n    }), _defineProperty(_ref2, \"h1,h2,h3,h4,h5,h6\", {\n      marginTop: rhythm(2)\n    }), _defineProperty(_ref2, \"h1\", _extends({}, scale(6 / 5), {\n      letterSpacing: \"-2px\"\n    })), _defineProperty(_ref2, \"h6\", {\n      fontStyle: \"italic\"\n    }), _ref2;\n  }\n};\nexports.default = theme;","import camelCase from \"camelcase\"\nimport type { IGatsbyImageData } from \"./index\"\n\nconst DEFAULT_PIXEL_DENSITIES = [0.25, 0.5, 1, 2]\nexport const DEFAULT_BREAKPOINTS = [750, 1080, 1366, 1920]\nexport const EVERY_BREAKPOINT = [\n  320, 654, 768, 1024, 1366, 1600, 1920, 2048, 2560, 3440, 3840, 4096,\n]\nconst DEFAULT_FLUID_WIDTH = 800\nconst DEFAULT_FIXED_WIDTH = 800\nconst DEFAULT_ASPECT_RATIO = 4 / 3\n\nexport type Fit = \"cover\" | \"fill\" | \"inside\" | \"outside\" | \"contain\"\n\nexport type Layout = \"fixed\" | \"fullWidth\" | \"constrained\"\nexport type ImageFormat = \"jpg\" | \"png\" | \"webp\" | \"avif\" | \"auto\" | \"\"\n\n/**\n * The minimal required reporter, as we don't want to import it from gatsby-cli\n */\nexport interface IReporter {\n  warn(message: string): void\n}\n\nexport interface ISharpGatsbyImageArgs {\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  placeholder?: \"tracedSVG\" | \"dominantColor\" | \"blurred\" | \"none\"\n  tracedSVGOptions?: Record<string, unknown>\n  width?: number\n  height?: number\n  aspectRatio?: number\n  sizes?: string\n  quality?: number\n  transformOptions?: {\n    fit?: Fit\n    cropFocus?: number | string\n    duotone?: {\n      highlight: string\n      shadow: string\n      opacity?: number\n    }\n    grayscale?: boolean\n    rotate?: number\n    trim?: number\n  }\n  jpgOptions?: Record<string, unknown>\n  pngOptions?: Record<string, unknown>\n  webpOptions?: Record<string, unknown>\n  avifOptions?: Record<string, unknown>\n  blurredOptions?: { width?: number; toFormat?: ImageFormat }\n  breakpoints?: Array<number>\n  backgroundColor?: string\n}\n\nexport interface IImageSizeArgs {\n  width?: number\n  height?: number\n  layout?: Layout\n  filename: string\n  outputPixelDensities?: Array<number>\n  breakpoints?: Array<number>\n  fit?: Fit\n  reporter?: IReporter\n  sourceMetadata: { width: number; height: number }\n}\n\nexport interface IImageSizes {\n  sizes: Array<number>\n  presentationWidth: number\n  presentationHeight: number\n  aspectRatio: number\n  unscaledWidth: number\n}\n\nexport interface IImage {\n  src: string\n  width: number\n  height: number\n  format: ImageFormat\n}\n\nexport interface IGatsbyImageHelperArgs {\n  pluginName: string\n  generateImageSource: (\n    filename: string,\n    width: number,\n    height: number,\n    format: ImageFormat,\n    fit?: Fit,\n    options?: Record<string, unknown>\n  ) => IImage\n  layout?: Layout\n  formats?: Array<ImageFormat>\n  filename: string\n  placeholderURL?: string\n  width?: number\n  height?: number\n  sizes?: string\n  reporter?: IReporter\n  sourceMetadata?: { width: number; height: number; format: ImageFormat }\n  fit?: Fit\n  options?: Record<string, unknown>\n  breakpoints?: Array<number>\n  backgroundColor?: string\n  aspectRatio?: number\n}\n\nconst warn = (message: string): void => console.warn(message)\n\nconst sortNumeric = (a: number, b: number): number => a - b\n\nexport const getSizes = (width: number, layout: Layout): string | undefined => {\n  switch (layout) {\n    // If screen is wider than the max size, image width is the max size,\n    // otherwise it's the width of the screen\n    case `constrained`:\n      return `(min-width: ${width}px) ${width}px, 100vw`\n\n    // Image is always the same width, whatever the size of the screen\n    case `fixed`:\n      return `${width}px`\n\n    // Image is always the width of the screen\n    case `fullWidth`:\n      return `100vw`\n\n    default:\n      return undefined\n  }\n}\n\nexport const getSrcSet = (images: Array<IImage>): string =>\n  images.map(image => `${image.src} ${image.width}w`).join(`,\\n`)\n\nexport function formatFromFilename(filename: string): ImageFormat | undefined {\n  const dot = filename.lastIndexOf(`.`)\n  if (dot !== -1) {\n    const ext = filename.slice(dot + 1)\n    if (ext === `jpeg`) {\n      return `jpg`\n    }\n    if (ext.length === 3 || ext.length === 4) {\n      return ext as ImageFormat\n    }\n  }\n  return undefined\n}\n\nexport function setDefaultDimensions(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageHelperArgs {\n  let {\n    layout = `constrained`,\n    width,\n    height,\n    sourceMetadata,\n    breakpoints,\n    aspectRatio,\n    formats = [`auto`, `webp`],\n  } = args\n  formats = formats.map(format => format.toLowerCase() as ImageFormat)\n  layout = camelCase(layout) as Layout\n\n  if (width && height) {\n    return { ...args, formats, layout, aspectRatio: width / height }\n  }\n  if (sourceMetadata.width && sourceMetadata.height && !aspectRatio) {\n    aspectRatio = sourceMetadata.width / sourceMetadata.height\n  }\n\n  if (layout === `fullWidth`) {\n    width = width || sourceMetadata.width || breakpoints[breakpoints.length - 1]\n    height = height || Math.round(width / (aspectRatio || DEFAULT_ASPECT_RATIO))\n  } else {\n    if (!width) {\n      if (height && aspectRatio) {\n        width = height * aspectRatio\n      } else if (sourceMetadata.width) {\n        width = sourceMetadata.width\n      } else if (height) {\n        width = Math.round(height / DEFAULT_ASPECT_RATIO)\n      } else {\n        width = DEFAULT_FIXED_WIDTH\n      }\n    }\n\n    if (aspectRatio && !height) {\n      height = Math.round(width / aspectRatio)\n    } else if (!aspectRatio) {\n      aspectRatio = width / height\n    }\n  }\n  return { ...args, width, height, aspectRatio, layout, formats }\n}\n\n/**\n * Use this for getting an image for the blurred placeholder. This ensures the\n * aspect ratio and crop match the main image\n */\nexport function getLowResolutionImageURL(\n  args: IGatsbyImageHelperArgs,\n  width = 20\n): string {\n  args = setDefaultDimensions(args)\n  const { generateImageSource, filename, aspectRatio } = args\n  return generateImageSource(\n    filename,\n    width,\n    Math.round(width / aspectRatio),\n    args.sourceMetadata.format || `jpg`,\n    args.fit,\n    args.options\n  )?.src\n}\n\nexport function generateImageData(\n  args: IGatsbyImageHelperArgs\n): IGatsbyImageData {\n  args = setDefaultDimensions(args)\n\n  let {\n    pluginName,\n    sourceMetadata,\n    generateImageSource,\n    layout,\n    fit,\n    options,\n    width,\n    height,\n    filename,\n    reporter = { warn },\n    backgroundColor,\n    placeholderURL,\n  } = args\n\n  if (!pluginName) {\n    reporter.warn(\n      `[gatsby-plugin-image] \"generateImageData\" was not passed a plugin name`\n    )\n  }\n\n  if (typeof generateImageSource !== `function`) {\n    throw new Error(`generateImageSource must be a function`)\n  }\n\n  if (!sourceMetadata || (!sourceMetadata.width && !sourceMetadata.height)) {\n    // No metadata means we let the CDN handle max size etc, aspect ratio etc\n    sourceMetadata = {\n      width,\n      height,\n      format: sourceMetadata?.format || formatFromFilename(filename) || `auto`,\n    }\n  } else if (!sourceMetadata.format) {\n    sourceMetadata.format = formatFromFilename(filename)\n  }\n\n  const formats = new Set<ImageFormat>(args.formats)\n\n  if (formats.size === 0 || formats.has(`auto`) || formats.has(``)) {\n    formats.delete(`auto`)\n    formats.delete(``)\n    formats.add(sourceMetadata.format)\n  }\n\n  if (formats.has(`jpg`) && formats.has(`png`)) {\n    reporter.warn(\n      `[${pluginName}] Specifying both 'jpg' and 'png' formats is not supported. Using 'auto' instead`\n    )\n    if (sourceMetadata.format === `jpg`) {\n      formats.delete(`png`)\n    } else {\n      formats.delete(`jpg`)\n    }\n  }\n\n  const imageSizes = calculateImageSizes({ ...args, sourceMetadata })\n\n  const result: IGatsbyImageData[\"images\"] = {\n    sources: [],\n  }\n\n  let sizes = args.sizes\n  if (!sizes) {\n    sizes = getSizes(imageSizes.presentationWidth, layout)\n  }\n\n  formats.forEach(format => {\n    const images = imageSizes.sizes\n      .map(size => {\n        const imageSrc = generateImageSource(\n          filename,\n          size,\n          Math.round(size / imageSizes.aspectRatio),\n          format,\n          fit,\n          options\n        )\n        if (\n          !imageSrc?.width ||\n          !imageSrc.height ||\n          !imageSrc.src ||\n          !imageSrc.format\n        ) {\n          reporter.warn(\n            `[${pluginName}] The resolver for image ${filename} returned an invalid value.`\n          )\n          return undefined\n        }\n        return imageSrc\n      })\n      .filter(Boolean)\n\n    if (format === `jpg` || format === `png` || format === `auto`) {\n      const unscaled =\n        images.find(img => img.width === imageSizes.unscaledWidth) || images[0]\n\n      if (unscaled) {\n        result.fallback = {\n          src: unscaled.src,\n          srcSet: getSrcSet(images),\n          sizes,\n        }\n      }\n    } else {\n      result.sources?.push({\n        srcSet: getSrcSet(images),\n        sizes,\n        type: `image/${format}`,\n      })\n    }\n  })\n\n  const imageProps: Partial<IGatsbyImageData> = {\n    images: result,\n    layout,\n    backgroundColor,\n  }\n\n  if (placeholderURL) {\n    imageProps.placeholder = { fallback: placeholderURL }\n  }\n\n  switch (layout) {\n    case `fixed`:\n      imageProps.width = imageSizes.presentationWidth\n      imageProps.height = imageSizes.presentationHeight\n      break\n\n    case `fullWidth`:\n      imageProps.width = 1\n      imageProps.height = 1 / imageSizes.aspectRatio\n      break\n\n    case `constrained`:\n      imageProps.width = args.width || imageSizes.presentationWidth || 1\n      imageProps.height = (imageProps.width || 1) / imageSizes.aspectRatio\n  }\n\n  return imageProps as IGatsbyImageData\n}\n\nconst dedupeAndSortDensities = (values: Array<number>): Array<number> =>\n  Array.from(new Set([1, ...values])).sort(sortNumeric)\n\nexport function calculateImageSizes(args: IImageSizeArgs): IImageSizes {\n  const {\n    width,\n    height,\n    filename,\n    layout = `constrained`,\n    sourceMetadata: imgDimensions,\n    reporter = { warn },\n    breakpoints = DEFAULT_BREAKPOINTS,\n  } = args\n\n  // check that all dimensions provided are positive\n  const userDimensions = { width, height }\n  const erroneousUserDimensions = Object.entries(userDimensions).filter(\n    ([_, size]) => typeof size === `number` && size < 1\n  )\n  if (erroneousUserDimensions.length) {\n    throw new Error(\n      `Specified dimensions for images must be positive numbers (> 0). Problem dimensions you have are ${erroneousUserDimensions\n        .map(dim => dim.join(`: `))\n        .join(`, `)}`\n    )\n  }\n\n  if (layout === `fixed`) {\n    return fixedImageSizes(args)\n  } else if (layout === `constrained`) {\n    return responsiveImageSizes(args)\n  } else if (layout === `fullWidth`) {\n    return responsiveImageSizes({ breakpoints, ...args })\n  } else {\n    reporter.warn(\n      `No valid layout was provided for the image at ${filename}. Valid image layouts are fixed, fullWidth, and constrained. Found ${layout}`\n    )\n    return {\n      sizes: [imgDimensions.width],\n      presentationWidth: imgDimensions.width,\n      presentationHeight: imgDimensions.height,\n      aspectRatio: imgDimensions.width / imgDimensions.height,\n      unscaledWidth: imgDimensions.width,\n    }\n  }\n}\nexport function fixedImageSizes({\n  filename,\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  reporter = { warn },\n}: IImageSizeArgs): IImageSizes {\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  if (!width) {\n    if (!height) {\n      width = DEFAULT_FIXED_WIDTH\n    } else {\n      width = Math.round(height * aspectRatio)\n    }\n  } else if (!height) {\n    height = Math.round(width / aspectRatio)\n  }\n\n  const originalWidth = width // will use this for presentationWidth, don't want to lose it\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n\n  // If the image is smaller than requested, warn the user that it's being processed as such\n  // print out this message with the necessary information before we overwrite it for sizing\n  if (isTopSizeOverriden) {\n    const fixedDimension = imgDimensions.width < width ? `width` : `height`\n    reporter.warn(`\nThe requested ${fixedDimension} \"${\n      fixedDimension === `width` ? width : height\n    }px\" for the image ${filename} was larger than the actual image ${fixedDimension} of ${\n      imgDimensions[fixedDimension]\n    }px. If possible, replace the current image with a larger one.`)\n\n    if (fixedDimension === `width`) {\n      width = imgDimensions.width\n      height = Math.round(width / aspectRatio)\n    } else {\n      height = imgDimensions.height\n      width = height * aspectRatio\n    }\n  }\n\n  const sizes = densities\n    .filter(size => size >= 1) // remove smaller densities because fixed images don't need them\n    .map(density => Math.round(density * (width as number)))\n    .filter(size => size <= imgDimensions.width)\n\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function responsiveImageSizes({\n  sourceMetadata: imgDimensions,\n  width,\n  height,\n  fit = `cover`,\n  outputPixelDensities = DEFAULT_PIXEL_DENSITIES,\n  breakpoints,\n  layout,\n}: IImageSizeArgs): IImageSizes {\n  let sizes\n  let aspectRatio = imgDimensions.width / imgDimensions.height\n  // Sort, dedupe and ensure there's a 1\n  const densities = dedupeAndSortDensities(outputPixelDensities)\n\n  // If both are provided then we need to check the fit\n  if (width && height) {\n    const calculated = getDimensionsAndAspectRatio(imgDimensions, {\n      width,\n      height,\n      fit,\n    })\n    width = calculated.width\n    height = calculated.height\n    aspectRatio = calculated.aspectRatio\n  }\n\n  // Case 1: width of height were passed in, make sure it isn't larger than the actual image\n  width = width && Math.min(width, imgDimensions.width)\n  height = height && Math.min(height, imgDimensions.height)\n\n  // Case 2: neither width or height were passed in, use default size\n  if (!width && !height) {\n    width = Math.min(DEFAULT_FLUID_WIDTH, imgDimensions.width)\n    height = width / aspectRatio\n  }\n\n  // if it still hasn't been found, calculate width from the derived height.\n  // TS isn't smart enough to realise the type for height has been narrowed here\n  if (!width) {\n    width = (height as number) * aspectRatio\n  }\n\n  const originalWidth = width\n  const isTopSizeOverriden =\n    imgDimensions.width < width || imgDimensions.height < (height as number)\n  if (isTopSizeOverriden) {\n    width = imgDimensions.width\n    height = imgDimensions.height\n  }\n\n  width = Math.round(width)\n\n  if (breakpoints?.length > 0) {\n    sizes = breakpoints.filter(size => size <= imgDimensions.width)\n\n    // If a larger breakpoint has been filtered-out, add the actual image width instead\n    if (\n      sizes.length < breakpoints.length &&\n      !sizes.includes(imgDimensions.width)\n    ) {\n      sizes.push(imgDimensions.width)\n    }\n  } else {\n    sizes = densities.map(density => Math.round(density * (width as number)))\n    sizes = sizes.filter(size => size <= imgDimensions.width)\n  }\n\n  // ensure that the size passed in is included in the final output\n  if (layout === `constrained` && !sizes.includes(width)) {\n    sizes.push(width)\n  }\n  sizes = sizes.sort(sortNumeric)\n  return {\n    sizes,\n    aspectRatio,\n    presentationWidth: originalWidth,\n    presentationHeight: Math.round(originalWidth / aspectRatio),\n    unscaledWidth: width,\n  }\n}\n\nexport function getDimensionsAndAspectRatio(\n  dimensions,\n  options\n): { width: number; height: number; aspectRatio: number } {\n  // Calculate the eventual width/height of the image.\n  const imageAspectRatio = dimensions.width / dimensions.height\n\n  let width = options.width\n  let height = options.height\n\n  switch (options.fit) {\n    case `fill`: {\n      width = options.width ? options.width : dimensions.width\n      height = options.height ? options.height : dimensions.height\n      break\n    }\n    case `inside`: {\n      const widthOption = options.width\n        ? options.width\n        : Number.MAX_SAFE_INTEGER\n      const heightOption = options.height\n        ? options.height\n        : Number.MAX_SAFE_INTEGER\n\n      width = Math.min(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.min(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n    case `outside`: {\n      const widthOption = options.width ? options.width : 0\n      const heightOption = options.height ? options.height : 0\n\n      width = Math.max(widthOption, Math.round(heightOption * imageAspectRatio))\n      height = Math.max(\n        heightOption,\n        Math.round(widthOption / imageAspectRatio)\n      )\n      break\n    }\n\n    default: {\n      if (options.width && !options.height) {\n        width = options.width\n        height = Math.round(options.width / imageAspectRatio)\n      }\n\n      if (options.height && !options.width) {\n        width = Math.round(options.height * imageAspectRatio)\n        height = options.height\n      }\n    }\n  }\n\n  return {\n    width,\n    height,\n    aspectRatio: width / height,\n  }\n}\n","/* global GATSBY___IMAGE */\nimport { generateImageData, EVERY_BREAKPOINT } from \"../image-utils\"\nimport type { CSSProperties, HTMLAttributes, ImgHTMLAttributes } from \"react\"\nimport type { Node } from \"gatsby\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { IGatsbyImageData } from \"./gatsby-image.browser\"\nimport type {\n  IGatsbyImageHelperArgs,\n  Layout,\n  IImage,\n  ImageFormat,\n} from \"../image-utils\"\n\n// Native lazy-loading support: https://addyosmani.com/blog/lazy-loading/\nexport const hasNativeLazyLoadSupport = (): boolean =>\n  typeof HTMLImageElement !== `undefined` &&\n  `loading` in HTMLImageElement.prototype\n\nexport function gatsbyImageIsInstalled(): boolean {\n  return typeof GATSBY___IMAGE !== `undefined` && GATSBY___IMAGE\n}\n\nexport type IGatsbyImageDataParent<T = never> = T & {\n  gatsbyImageData: IGatsbyImageData\n}\nexport type IGatsbyImageParent<T = never> = T & {\n  gatsbyImage: IGatsbyImageData\n}\nexport type FileNode = Node & {\n  childImageSharp?: IGatsbyImageDataParent<Node>\n}\n\nconst isGatsbyImageData = (\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageData | any\n): node is IGatsbyImageData =>\n  // 🦆 check for a deep prop to be sure this is a valid gatsbyImageData object\n  Boolean(node?.images?.fallback?.src)\n\nconst isGatsbyImageDataParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageDataParent<T> | any\n): node is IGatsbyImageDataParent<T> => Boolean(node?.gatsbyImageData)\n\nconst isGatsbyImageParent = <T>(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  node: IGatsbyImageParent<T> | any\n): node is IGatsbyImageParent<T> => Boolean(node?.gatsbyImage)\n\nexport type ImageDataLike =\n  | FileNode\n  | IGatsbyImageDataParent\n  | IGatsbyImageParent\n  | IGatsbyImageData\n\nexport const getImage = (node: ImageDataLike): IGatsbyImageData | undefined => {\n  if (isGatsbyImageData(node)) {\n    return node\n  }\n  // gatsbyImageData GraphQL field\n  if (isGatsbyImageDataParent(node)) {\n    return node.gatsbyImageData\n  }\n  // gatsbyImage GraphQL field for Gatsby's Image CDN service\n  if (isGatsbyImageParent(node)) {\n    return node.gatsbyImage\n  }\n  return node?.childImageSharp?.gatsbyImageData\n}\n\nexport const getSrc = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.src\n\nexport const getSrcSet = (node: ImageDataLike): string | undefined =>\n  getImage(node)?.images?.fallback?.srcSet\n\nexport function getWrapperProps(\n  width: number,\n  height: number,\n  layout: Layout\n): Pick<HTMLAttributes<HTMLElement>, \"className\" | \"style\"> & {\n  \"data-gatsby-image-wrapper\": string\n} {\n  const wrapperStyle: CSSProperties = {}\n\n  let className = `gatsby-image-wrapper`\n\n  // If the plugin isn't installed we need to apply the styles inline\n  if (!gatsbyImageIsInstalled()) {\n    wrapperStyle.position = `relative`\n    wrapperStyle.overflow = `hidden`\n  }\n\n  if (layout === `fixed`) {\n    wrapperStyle.width = width\n    wrapperStyle.height = height\n  } else if (layout === `constrained`) {\n    if (!gatsbyImageIsInstalled()) {\n      wrapperStyle.display = `inline-block`\n      wrapperStyle.verticalAlign = `top`\n    }\n    className = `gatsby-image-wrapper gatsby-image-wrapper-constrained`\n  }\n\n  return {\n    className,\n    \"data-gatsby-image-wrapper\": ``,\n    style: wrapperStyle,\n  }\n}\n\nexport interface IUrlBuilderArgs<OptionsType> {\n  width: number\n  height: number\n  baseUrl: string\n  format: ImageFormat\n  options: OptionsType\n}\nexport interface IGetImageDataArgs<OptionsType = Record<string, unknown>> {\n  baseUrl: string\n  /**\n   * For constrained and fixed images, the size of the image element\n   */\n  width?: number\n  height?: number\n  /**\n   * If available, pass the source image width and height\n   */\n  sourceWidth?: number\n  sourceHeight?: number\n  /**\n   * If only one dimension is passed, then this will be used to calculate the other.\n   */\n  aspectRatio?: number\n  layout?: Layout\n  /**\n   * Returns a URL based on the passed arguments. Should be a pure function\n   */\n  urlBuilder: (args: IUrlBuilderArgs<OptionsType>) => string\n\n  /**\n   * Should be a data URI\n   */\n  placeholderURL?: string\n  backgroundColor?: string\n  /**\n   * Used in error messages etc\n   */\n  pluginName?: string\n\n  /**\n   * If you do not support auto-format, pass an array of image types here\n   */\n  formats?: Array<ImageFormat>\n\n  breakpoints?: Array<number>\n\n  /**\n   * Passed to the urlBuilder function\n   */\n  options?: OptionsType\n}\n\n/**\n * Use this hook to generate gatsby-plugin-image data in the browser.\n */\nexport function getImageData<OptionsType>({\n  baseUrl,\n  urlBuilder,\n  sourceWidth,\n  sourceHeight,\n  pluginName = `getImageData`,\n  formats = [`auto`],\n  breakpoints,\n  options,\n  ...props\n}: IGetImageDataArgs<OptionsType>): IGatsbyImageData {\n  if (\n    !breakpoints?.length &&\n    (props.layout === `fullWidth` || (props.layout as string) === `FULL_WIDTH`)\n  ) {\n    breakpoints = EVERY_BREAKPOINT\n  }\n  const generateImageSource = (\n    baseUrl: string,\n    width: number,\n    height?: number,\n    format?: ImageFormat\n  ): IImage => {\n    return {\n      width,\n      height,\n      format,\n      src: urlBuilder({ baseUrl, width, height, options, format }),\n    }\n  }\n\n  const sourceMetadata: IGatsbyImageHelperArgs[\"sourceMetadata\"] = {\n    width: sourceWidth,\n    height: sourceHeight,\n    format: `auto`,\n  }\n\n  const args: IGatsbyImageHelperArgs = {\n    ...props,\n    pluginName,\n    generateImageSource,\n    filename: baseUrl,\n    formats,\n    breakpoints,\n    sourceMetadata,\n  }\n  return generateImageData(args)\n}\n\nexport function getMainProps(\n  isLoading: boolean,\n  isLoaded: boolean,\n  images: IGatsbyImageData[\"images\"],\n  loading?: \"eager\" | \"lazy\",\n  style: CSSProperties = {}\n): Partial<MainImageProps> {\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      transform: `translateZ(0)`,\n      transition: `opacity 250ms linear`,\n      width: `100%`,\n      willChange: `opacity`,\n      ...style,\n    }\n  }\n\n  const result = {\n    ...images,\n    loading,\n    shouldLoad: isLoading,\n    \"data-main-image\": ``,\n    style: {\n      ...style,\n      opacity: isLoaded ? 1 : 0,\n    },\n  }\n\n  return result\n}\n\nexport type PlaceholderImageAttrs = ImgHTMLAttributes<HTMLImageElement> &\n  Pick<PlaceholderProps, \"sources\" | \"fallback\"> & {\n    \"data-placeholder-image\"?: string\n  }\n\nexport function getPlaceholderProps(\n  placeholder: PlaceholderImageAttrs | undefined,\n  isLoaded: boolean,\n  layout: Layout,\n  width?: number,\n  height?: number,\n  backgroundColor?: string,\n  objectFit?: CSSProperties[\"objectFit\"],\n  objectPosition?: CSSProperties[\"objectPosition\"]\n): PlaceholderImageAttrs {\n  const wrapperStyle: CSSProperties = {}\n\n  if (backgroundColor) {\n    wrapperStyle.backgroundColor = backgroundColor\n\n    if (layout === `fixed`) {\n      wrapperStyle.width = width\n      wrapperStyle.height = height\n      wrapperStyle.backgroundColor = backgroundColor\n      wrapperStyle.position = `relative`\n    } else if (layout === `constrained`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    } else if (layout === `fullWidth`) {\n      wrapperStyle.position = `absolute`\n      wrapperStyle.top = 0\n      wrapperStyle.left = 0\n      wrapperStyle.bottom = 0\n      wrapperStyle.right = 0\n    }\n  }\n\n  if (objectFit) {\n    wrapperStyle.objectFit = objectFit\n  }\n\n  if (objectPosition) {\n    wrapperStyle.objectPosition = objectPosition\n  }\n  const result: PlaceholderImageAttrs = {\n    ...placeholder,\n    \"aria-hidden\": true,\n    \"data-placeholder-image\": ``,\n    style: {\n      opacity: isLoaded ? 0 : 1,\n      transition: `opacity 500ms linear`,\n      ...wrapperStyle,\n    },\n  }\n\n  // fallback when it's not configured in gatsby-config.\n  if (!gatsbyImageIsInstalled()) {\n    result.style = {\n      height: `100%`,\n      left: 0,\n      position: `absolute`,\n      top: 0,\n      width: `100%`,\n    }\n  }\n\n  return result\n}\n\nexport interface IArtDirectedImage {\n  media: string\n  image: IGatsbyImageData\n}\n\n/**\n * Generate a Gatsby image data object with multiple, art-directed images that display at different\n * resolutions.\n *\n * @param defaultImage The image displayed when no media query matches.\n * It is also used for all other settings applied to the image, such as width, height and layout.\n * You should pass a className to the component with media queries to adjust the size of the container,\n * as this cannot be adjusted automatically.\n * @param artDirected Array of objects which each contains a `media` string which is a media query\n * such as `(min-width: 320px)`, and the image object to use when that query matches.\n */\nexport function withArtDirection(\n  defaultImage: IGatsbyImageData,\n  artDirected: Array<IArtDirectedImage>\n): IGatsbyImageData {\n  const { images, placeholder, ...props } = defaultImage\n  const output: IGatsbyImageData = {\n    ...props,\n    images: {\n      ...images,\n      sources: [],\n    },\n    placeholder: placeholder && {\n      ...placeholder,\n      sources: [],\n    },\n  }\n\n  artDirected.forEach(({ media, image }) => {\n    if (!media) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(\n          \"[gatsby-plugin-image] All art-directed images passed to must have a value set for `media`. Skipping.\"\n        )\n      }\n      return\n    }\n\n    if (\n      image.layout !== defaultImage.layout &&\n      process.env.NODE_ENV === `development`\n    ) {\n      console.warn(\n        `[gatsby-plugin-image] Mismatched image layout: expected \"${defaultImage.layout}\" but received \"${image.layout}\". All art-directed images use the same layout as the default image`\n      )\n    }\n\n    output.images.sources.push(\n      ...image.images.sources.map(source => {\n        return { ...source, media }\n      }),\n      {\n        media,\n        srcSet: image.images.fallback.srcSet,\n      }\n    )\n\n    if (!output.placeholder) {\n      return\n    }\n\n    output.placeholder.sources.push({\n      media,\n      srcSet: image.placeholder.fallback,\n    })\n  })\n  output.images.sources.push(...images.sources)\n  if (placeholder?.sources) {\n    output.placeholder?.sources.push(...placeholder.sources)\n  }\n  return output\n}\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\n\nexport interface IResponsiveImageProps {\n  sizes?: string\n  srcSet: string\n}\n\nexport type SourceProps = IResponsiveImageProps &\n  (\n    | {\n        media: string\n        type?: string\n      }\n    | {\n        media?: string\n        type: string\n      }\n  )\n\ntype FallbackProps = { src: string } & Partial<IResponsiveImageProps>\n\ntype ImageProps = ImgHTMLAttributes<HTMLImageElement> & {\n  src: string\n  alt: string\n  shouldLoad: boolean\n}\n\nexport type PictureProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: FallbackProps\n  sources?: Array<SourceProps>\n  alt: string\n  shouldLoad?: boolean\n}\n\nconst Image: FunctionComponent<ImageProps> = function Image({\n  src,\n  srcSet,\n  loading,\n  alt = ``,\n  shouldLoad,\n  ...props\n}) {\n  return (\n    <img\n      {...props}\n      decoding=\"async\"\n      loading={loading}\n      src={shouldLoad ? src : undefined}\n      data-src={!shouldLoad ? src : undefined}\n      srcSet={shouldLoad ? srcSet : undefined}\n      data-srcset={!shouldLoad ? srcSet : undefined}\n      alt={alt}\n    />\n  )\n}\n\nexport const Picture: React.FC<PictureProps> = function Picture({\n  fallback,\n  sources = [],\n  shouldLoad = true,\n  ...props\n}) {\n  const sizes = props.sizes || fallback?.sizes\n  const fallbackImage = (\n    <Image {...props} {...fallback} sizes={sizes} shouldLoad={shouldLoad} />\n  )\n\n  if (!sources.length) {\n    return fallbackImage\n  }\n\n  return (\n    <picture>\n      {sources.map(({ media, srcSet, type }) => (\n        <source\n          key={`${media}-${type}-${srcSet}`}\n          type={type}\n          media={media}\n          srcSet={shouldLoad ? srcSet : undefined}\n          data-srcset={!shouldLoad ? srcSet : undefined}\n          sizes={sizes}\n        />\n      ))}\n      {fallbackImage}\n    </picture>\n  )\n}\n\nImage.propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n  sizes: PropTypes.string,\n  srcSet: PropTypes.string,\n  shouldLoad: PropTypes.bool,\n}\n\nPicture.displayName = `Picture`\nPicture.propTypes = {\n  alt: PropTypes.string.isRequired,\n  shouldLoad: PropTypes.bool,\n  fallback: PropTypes.exact({\n    src: PropTypes.string.isRequired,\n    srcSet: PropTypes.string,\n    sizes: PropTypes.string,\n  }),\n  sources: PropTypes.arrayOf(\n    PropTypes.oneOfType([\n      PropTypes.exact({\n        media: PropTypes.string.isRequired,\n        type: PropTypes.string,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n      PropTypes.exact({\n        media: PropTypes.string,\n        type: PropTypes.string.isRequired,\n        sizes: PropTypes.string,\n        srcSet: PropTypes.string.isRequired,\n      }),\n    ])\n  ),\n}\n","import React, { Fragment, FunctionComponent } from \"react\"\nimport terserMacro from \"../../macros/terser.macro\"\nimport { Layout } from \"../image-utils\"\n\nexport interface ILayoutWrapperProps {\n  layout: Layout\n  width: number\n  height: number\n}\n\nconst NativeScriptLoading: FunctionComponent = () => (\n  <script\n    type=\"module\"\n    dangerouslySetInnerHTML={{\n      __html: terserMacro`\nconst hasNativeLazyLoadSupport = typeof HTMLImageElement !== \"undefined\" && \"loading\" in HTMLImageElement.prototype;\nif (hasNativeLazyLoadSupport) {\n  const gatsbyImages = document.querySelectorAll('img[data-main-image]');\n  for (let mainImage of gatsbyImages) {\n    if (mainImage.dataset.src) {\n      mainImage.setAttribute('src', mainImage.dataset.src)\n      mainImage.removeAttribute('data-src')\n    }\n    if (mainImage.dataset.srcset) {\n      mainImage.setAttribute('srcset', mainImage.dataset.srcset)\n      mainImage.removeAttribute('data-srcset')\n    }\n\n    const sources = mainImage.parentNode.querySelectorAll('source[data-srcset]');\n    for (let source of sources) {\n      source.setAttribute('srcset', source.dataset.srcset)\n      source.removeAttribute('data-srcset')\n    }\n\n    if (mainImage.complete) {\n      mainImage.style.opacity = 1;\n\n      // also hide the placeholder\n      mainImage.parentNode.parentNode.querySelector('[data-placeholder-image]').style.opacity = 0;\n    }\n  }\n}\n`,\n    }}\n  />\n)\n\nexport function getSizer(\n  layout: Layout,\n  width: number,\n  height: number\n): string {\n  let sizer = ``\n  if (layout === `fullWidth`) {\n    sizer = `<div aria-hidden=\"true\" style=\"padding-top: ${\n      (height / width) * 100\n    }%;\"></div>`\n  }\n\n  if (layout === `constrained`) {\n    sizer = `<div style=\"max-width: ${width}px; display: block;\"><img alt=\"\" role=\"presentation\" aria-hidden=\"true\" src=\"data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E\" style=\"max-width: 100%; display: block; position: static;\"></div>`\n  }\n\n  return sizer\n}\n\nconst Sizer: FunctionComponent<ILayoutWrapperProps> = function Sizer({\n  layout,\n  width,\n  height,\n}) {\n  if (layout === `fullWidth`) {\n    return (\n      <div aria-hidden style={{ paddingTop: `${(height / width) * 100}%` }} />\n    )\n  }\n\n  if (layout === `constrained`) {\n    return (\n      <div style={{ maxWidth: width, display: `block` }}>\n        <img\n          alt=\"\"\n          role=\"presentation\"\n          aria-hidden=\"true\"\n          src={`data:image/svg+xml;charset=utf-8,%3Csvg height='${height}' width='${width}' xmlns='http://www.w3.org/2000/svg' version='1.1'%3E%3C/svg%3E`}\n          style={{\n            maxWidth: `100%`,\n            display: `block`,\n            position: `static`,\n          }}\n        />\n      </div>\n    )\n  }\n\n  return null\n}\n\nexport const LayoutWrapper: FunctionComponent<ILayoutWrapperProps> =\n  function LayoutWrapper({ children, ...props }) {\n    return (\n      <Fragment>\n        <Sizer {...props} />\n        {children}\n\n        {SERVER ? <NativeScriptLoading /> : null}\n      </Fragment>\n    )\n  }\n","import React, { FunctionComponent, ImgHTMLAttributes } from \"react\"\nimport * as PropTypes from \"prop-types\"\nimport { Picture, SourceProps } from \"./picture\"\n\nexport type PlaceholderProps = ImgHTMLAttributes<HTMLImageElement> & {\n  fallback?: string\n  sources?: Array<SourceProps>\n}\n\nexport const Placeholder: FunctionComponent<PlaceholderProps> =\n  function Placeholder({ fallback, ...props }) {\n    if (fallback) {\n      return (\n        <Picture\n          {...props}\n          fallback={{\n            src: fallback,\n          }}\n          aria-hidden\n          alt=\"\"\n        />\n      )\n    } else {\n      return <div {...props}></div>\n    }\n  }\n\nPlaceholder.displayName = `Placeholder`\nPlaceholder.propTypes = {\n  fallback: PropTypes.string,\n  sources: Picture.propTypes?.sources,\n  alt: function (props, propName, componentName): Error | null {\n    if (!props[propName]) {\n      return null\n    }\n\n    return new Error(\n      `Invalid prop \\`${propName}\\` supplied to \\`${componentName}\\`. Validation failed.`\n    )\n  },\n}\n","import React from \"react\"\nimport { Picture, PictureProps } from \"./picture\"\n\nexport type MainImageProps = PictureProps\n\nexport const MainImage: React.FC<PictureProps> = function MainImage(props) {\n  return (\n    <>\n      <Picture {...props} />\n      <noscript>\n        <Picture {...props} shouldLoad={true} />\n      </noscript>\n    </>\n  )\n}\n\nMainImage.displayName = `MainImage`\nMainImage.propTypes = Picture.propTypes\n","import {\n  createElement,\n  memo,\n  useMemo,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n} from \"react\"\nimport {\n  getWrapperProps,\n  gatsbyImageIsInstalled,\n  hasNativeLazyLoadSupport,\n} from \"./hooks\"\nimport { getSizer } from \"./layout-wrapper\"\nimport { propTypes } from \"./gatsby-image.server\"\nimport type {\n  FC,\n  ElementType,\n  FunctionComponent,\n  ImgHTMLAttributes,\n  CSSProperties,\n  ReactEventHandler,\n} from \"react\"\nimport type { renderImageToString } from \"./lazy-hydrate\"\nimport type { PlaceholderProps } from \"./placeholder\"\nimport type { MainImageProps } from \"./main-image\"\nimport type { Layout } from \"../image-utils\"\n\nconst imageCache = new Set<string>()\nlet renderImageToStringPromise\nlet renderImage: typeof renderImageToString | undefined\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface GatsbyImageProps\n  extends Omit<\n    ImgHTMLAttributes<HTMLImageElement>,\n    \"placeholder\" | \"onLoad\" | \"src\" | \"srcSet\" | \"width\" | \"height\"\n  > {\n  alt: string\n  as?: ElementType\n  className?: string\n  class?: string\n  imgClassName?: string\n  image: IGatsbyImageData\n  imgStyle?: CSSProperties\n  backgroundColor?: string\n  objectFit?: CSSProperties[\"objectFit\"]\n  objectPosition?: CSSProperties[\"objectPosition\"]\n  onLoad?: (props: { wasCached: boolean }) => void\n  onError?: ReactEventHandler<HTMLImageElement>\n  onStartLoad?: (props: { wasCached: boolean }) => void\n}\n\nexport interface IGatsbyImageData {\n  layout: Layout\n  width: number\n  height: number\n  backgroundColor?: string\n  images: Pick<MainImageProps, \"sources\" | \"fallback\">\n  placeholder?: Pick<PlaceholderProps, \"sources\" | \"fallback\">\n}\n\nconst GatsbyImageHydrator: FC<GatsbyImageProps> = function GatsbyImageHydrator({\n  as = `div`,\n  image,\n  style,\n  backgroundColor,\n  className,\n  class: preactClass,\n  onStartLoad,\n  onLoad,\n  onError,\n  ...props\n}) {\n  const { width, height, layout } = image\n  const {\n    style: wStyle,\n    className: wClass,\n    ...wrapperProps\n  } = getWrapperProps(width, height, layout)\n  const root = useRef<HTMLElement>()\n  const cacheKey = useMemo(() => JSON.stringify(image.images), [image.images])\n\n  // Preact uses class instead of className so we need to check for both\n  if (preactClass) {\n    className = preactClass\n  }\n\n  const sizer = getSizer(layout, width, height)\n\n  useEffect(() => {\n    if (!renderImageToStringPromise) {\n      renderImageToStringPromise = import(`./lazy-hydrate`).then(\n        ({ renderImageToString, swapPlaceholderImage }) => {\n          renderImage = renderImageToString\n\n          return {\n            renderImageToString,\n            swapPlaceholderImage,\n          }\n        }\n      )\n    }\n\n    // The plugin image component is a bit special where if it's server-side rendered, we add extra script tags to support lazy-loading without\n    // In this case we stop hydration but fire the correct events.\n    const ssrImage = root.current.querySelector(\n      `[data-gatsby-image-ssr]`\n    ) as HTMLImageElement\n    if (ssrImage && hasNativeLazyLoadSupport()) {\n      if (ssrImage.complete) {\n        // Trigger onStartload and onLoad events\n        onStartLoad?.({\n          wasCached: true,\n        })\n        onLoad?.({\n          wasCached: true,\n        })\n\n        // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n        setTimeout(() => {\n          ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n        }, 0)\n      } else {\n        document.addEventListener(`load`, function onLoadListener() {\n          document.removeEventListener(`load`, onLoadListener)\n\n          onStartLoad?.({\n            wasCached: true,\n          })\n          onLoad?.({\n            wasCached: true,\n          })\n          // remove ssr key for state updates but add delay to not fight with native code snippt of gatsby-ssr\n          setTimeout(() => {\n            ssrImage.removeAttribute(`data-gatsby-image-ssr`)\n          }, 0)\n        })\n      }\n\n      imageCache.add(cacheKey)\n\n      return\n    }\n\n    if (renderImage && imageCache.has(cacheKey)) {\n      return\n    }\n\n    let animationFrame\n    let cleanupCallback\n    renderImageToStringPromise.then(\n      ({ renderImageToString, swapPlaceholderImage }) => {\n        root.current.innerHTML = renderImageToString({\n          isLoading: true,\n          isLoaded: imageCache.has(cacheKey),\n          image,\n          ...props,\n        })\n\n        if (!imageCache.has(cacheKey)) {\n          animationFrame = requestAnimationFrame(() => {\n            if (root.current) {\n              cleanupCallback = swapPlaceholderImage(\n                root.current,\n                cacheKey,\n                imageCache,\n                style,\n                onStartLoad,\n                onLoad,\n                onError\n              )\n            }\n          })\n        }\n      }\n    )\n\n    // eslint-disable-next-line consistent-return\n    return (): void => {\n      if (animationFrame) {\n        cancelAnimationFrame(animationFrame)\n      }\n      if (cleanupCallback) {\n        cleanupCallback()\n      }\n    }\n  }, [image])\n\n  // useLayoutEffect is ran before React commits to the DOM. This allows us to make sure our HTML is using our cached image version\n  useLayoutEffect(() => {\n    if (imageCache.has(cacheKey) && renderImage) {\n      root.current.innerHTML = renderImage({\n        isLoading: imageCache.has(cacheKey),\n        isLoaded: imageCache.has(cacheKey),\n        image,\n        ...props,\n      })\n\n      // Trigger onStartload and onLoad events\n      onStartLoad?.({\n        wasCached: true,\n      })\n      onLoad?.({\n        wasCached: true,\n      })\n    }\n  }, [image])\n\n  // By keeping all props equal React will keep the component in the DOM\n  return createElement(as, {\n    ...wrapperProps,\n    style: {\n      ...wStyle,\n      ...style,\n      backgroundColor,\n    },\n    className: `${wClass}${className ? ` ${className}` : ``}`,\n    ref: root,\n    dangerouslySetInnerHTML: {\n      __html: sizer,\n    },\n    suppressHydrationWarning: true,\n  })\n}\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> = memo(\n  function GatsbyImage(props) {\n    if (!props.image) {\n      if (process.env.NODE_ENV === `development`) {\n        console.warn(`[gatsby-plugin-image] Missing image prop`)\n      }\n\n      return null\n    }\n\n    if (!gatsbyImageIsInstalled() && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `[gatsby-plugin-image] You're missing out on some cool performance features. Please add \"gatsby-plugin-image\" to your gatsby-config.js`\n      )\n    }\n\n    return createElement(GatsbyImageHydrator, props)\n  }\n)\n\nGatsbyImage.propTypes = propTypes\nGatsbyImage.displayName = `GatsbyImage`\n","import React from \"react\"\nimport { getWrapperProps, getMainProps, getPlaceholderProps } from \"./hooks\"\nimport { Placeholder } from \"./placeholder\"\nimport { MainImage, MainImageProps } from \"./main-image\"\nimport { LayoutWrapper } from \"./layout-wrapper\"\nimport PropTypes from \"prop-types\"\nimport type { FunctionComponent, WeakValidationMap } from \"react\"\nimport type { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\n\nconst removeNewLines = (str: string): string => str.replace(/\\n/g, ``)\n\nexport const GatsbyImage: FunctionComponent<GatsbyImageProps> =\n  function GatsbyImage({\n    as = `div`,\n    className,\n    class: preactClass,\n    style,\n    image,\n    loading = `lazy`,\n    imgClassName,\n    imgStyle,\n    backgroundColor,\n    objectFit,\n    objectPosition,\n    ...props\n  }) {\n    if (!image) {\n      console.warn(`[gatsby-plugin-image] Missing image prop`)\n      return null\n    }\n\n    if (preactClass) {\n      className = preactClass\n    }\n\n    imgStyle = {\n      objectFit,\n      objectPosition,\n      backgroundColor,\n      ...imgStyle,\n    }\n\n    const {\n      width,\n      height,\n      layout,\n      images,\n      placeholder,\n      backgroundColor: placeholderBackgroundColor,\n    } = image\n\n    const {\n      style: wStyle,\n      className: wClass,\n      ...wrapperProps\n    } = getWrapperProps(width, height, layout)\n\n    const cleanedImages: IGatsbyImageData[\"images\"] = {\n      fallback: undefined,\n      sources: [],\n    }\n    if (images.fallback) {\n      cleanedImages.fallback = {\n        ...images.fallback,\n        srcSet: images.fallback.srcSet\n          ? removeNewLines(images.fallback.srcSet)\n          : undefined,\n      }\n    }\n\n    if (images.sources) {\n      cleanedImages.sources = images.sources.map(source => {\n        return {\n          ...source,\n          srcSet: removeNewLines(source.srcSet),\n        }\n      })\n    }\n\n    return React.createElement(\n      as,\n      {\n        ...wrapperProps,\n        style: {\n          ...wStyle,\n          ...style,\n          backgroundColor,\n        },\n        className: `${wClass}${className ? ` ${className}` : ``}`,\n      },\n      <LayoutWrapper layout={layout} width={width} height={height}>\n        <Placeholder\n          {...getPlaceholderProps(\n            placeholder,\n            false,\n            layout,\n            width,\n            height,\n            placeholderBackgroundColor,\n            objectFit,\n            objectPosition\n          )}\n        />\n\n        <MainImage\n          data-gatsby-image-ssr=\"\"\n          className={imgClassName}\n          {...(props as Omit<\n            MainImageProps,\n            \"images\" | \"fallback\" | \"onError\" | \"onLoad\"\n          >)}\n          // When eager is set we want to start the isLoading state on true (we want to load the img without react)\n          {...getMainProps(\n            loading === `eager`,\n            false,\n            cleanedImages,\n            loading,\n            imgStyle\n          )}\n        />\n      </LayoutWrapper>\n    )\n  }\n\nexport const altValidator: PropTypes.Validator<string> = (\n  props: GatsbyImageProps,\n  propName,\n  componentName,\n  ...rest\n): Error | undefined => {\n  if (!props.alt && props.alt !== ``) {\n    return new Error(\n      `The \"alt\" prop is required in ${componentName}. If the image is purely presentational then pass an empty string: e.g. alt=\"\". Learn more: https://a11y-style-guide.com/style-guide/section-media.html`\n    )\n  }\n\n  return PropTypes.string(props, propName, componentName, ...rest)\n}\n\nexport const propTypes = {\n  image: PropTypes.object.isRequired,\n  alt: altValidator,\n} as WeakValidationMap<GatsbyImageProps>\n","import React, { FunctionComponent, ReactElement } from \"react\"\nimport {\n  altValidator,\n  GatsbyImage as GatsbyImageServer,\n} from \"./gatsby-image.server\"\nimport { GatsbyImageProps, IGatsbyImageData } from \"./gatsby-image.browser\"\nimport PropTypes from \"prop-types\"\nimport { ISharpGatsbyImageArgs } from \"../image-utils\"\n\nexport interface IStaticImageProps\n  extends Omit<GatsbyImageProps, \"image\">,\n    Omit<ISharpGatsbyImageArgs, \"backgroundColor\"> {\n  src: string\n}\n\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nexport function _getStaticImage(\n  GatsbyImage: FunctionComponent<GatsbyImageProps>\n): React.FC<IStaticImageProps & IPrivateProps> {\n  return function StaticImage({\n    src,\n    __imageData: imageData,\n    __error,\n    // We extract these because they're not meant to be passed-down to GatsbyImage\n    /* eslint-disable @typescript-eslint/no-unused-vars */\n    width,\n    height,\n    aspectRatio,\n    tracedSVGOptions,\n    placeholder,\n    formats,\n    quality,\n    transformOptions,\n    jpgOptions,\n    pngOptions,\n    webpOptions,\n    avifOptions,\n    blurredOptions,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n    ...props\n  }): ReactElement {\n    if (__error) {\n      console.warn(__error)\n    }\n\n    if (imageData) {\n      return <GatsbyImage image={imageData} {...props} />\n    }\n    console.warn(`Image not loaded`, src)\n    if (!__error && process.env.NODE_ENV === `development`) {\n      console.warn(\n        `Please ensure that \"gatsby-plugin-image\" is included in the plugins array in gatsby-config.js, and that your version of gatsby is at least 2.24.78`\n      )\n    }\n    return null\n  }\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageServer)\n\nconst checkDimensionProps: PropTypes.Validator<number> = (\n  props: IStaticImageProps & IPrivateProps,\n  propName: keyof IStaticImageProps & IPrivateProps,\n  ...rest\n) => {\n  if (\n    props.layout === `fullWidth` &&\n    (propName === `width` || propName === `height`) &&\n    props[propName]\n  ) {\n    return new Error(\n      `\"${propName}\" ${props[propName]} may not be passed when layout is fullWidth.`\n    )\n  }\n  return PropTypes.number(props, propName, ...rest)\n}\n\nconst validLayouts = new Set([`fixed`, `fullWidth`, `constrained`])\n\nexport const propTypes = {\n  src: PropTypes.string.isRequired,\n  alt: altValidator,\n  width: checkDimensionProps,\n  height: checkDimensionProps,\n  sizes: PropTypes.string,\n  layout: (props: IStaticImageProps & IPrivateProps): Error | undefined => {\n    if (props.layout === undefined) {\n      return undefined\n    }\n    if (validLayouts.has(props.layout)) {\n      return undefined\n    }\n\n    return new Error(\n      `Invalid value ${props.layout}\" provided for prop \"layout\". Defaulting to \"constrained\". Valid values are \"fixed\", \"fullWidth\" or \"constrained\".`\n    )\n  },\n}\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import {\n  GatsbyImage as GatsbyImageBrowser,\n  IGatsbyImageData,\n} from \"./gatsby-image.browser\"\nimport React from \"react\"\nimport {\n  _getStaticImage,\n  propTypes,\n  IStaticImageProps,\n} from \"./static-image.server\"\n// These values are added by Babel. Do not add them manually\ninterface IPrivateProps {\n  __imageData?: IGatsbyImageData\n  __error?: string\n}\n\nconst StaticImage: React.FC<IStaticImageProps & IPrivateProps> =\n  _getStaticImage(GatsbyImageBrowser)\n\nStaticImage.displayName = `StaticImage`\nStaticImage.propTypes = propTypes\n\nexport { StaticImage }\n","import Typography from \"typography\"\nimport theme from \"typography-theme-sutro\"\n\ntheme.overrideThemeStyles = () => {\n  return {\n    \"a.gatsby-resp-image-link\": {\n      boxShadow: `none`,\n    },\n  }\n}\n\ndelete theme.googleFonts\n\nconst typography = new Typography(theme)\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql, Link } from \"gatsby\"\nimport { GatsbyImage } from \"gatsby-plugin-image\"\n\nimport { rhythm } from \"./typography\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      avatar: file(absolutePath: { regex: \"/profile-pic.jpg/\" }) {\n        childImageSharp {\n          gatsbyImageData(width: 50, height: 50, layout: FIXED)\n        }\n      }\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  const { author } = data.site.siteMetadata\n  return (\n    <div\n      style={{\n        display: `flex`,\n        marginBottom: rhythm(2.5),\n      }}\n    >\n      <GatsbyImage\n        image={data.avatar.childImageSharp.gatsbyImageData}\n        alt={author.name}\n        style={{\n          marginRight: rhythm(1 / 2),\n          marginBottom: 0,\n          minWidth: 50,\n          borderRadius: `100%`,\n        }}\n        imgStyle={{\n          borderRadius: `50%`,\n        }}\n      />\n      <p>\n        Written by{\" \"}\n        <strong>\n          <Link to=\"/\">{author.name}</Link>\n        </strong>\n        . {author.summary}\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport { TypographyStyle } from \"react-typography\"\n\nimport { default as typography, rhythm, scale } from \"./typography\"\n\nconst Layout = ({ location, title, author, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/blog/`\n  let header\n\n  if (location.pathname === rootPath) {\n    header = (\n      <h1\n        style={{\n          ...scale(1.5),\n          marginBottom: rhythm(1.5),\n          marginTop: 0,\n        }}\n      >\n        {title}\n      </h1>\n    )\n  } else {\n    header = (\n      <h3\n        style={{\n          fontFamily: `Montserrat, sans-serif`,\n          marginTop: 0,\n        }}\n      >\n        <Link to={`/blog/`}>{title}</Link>\n      </h3>\n    )\n  }\n  return (\n    <div\n      style={{\n        marginLeft: `auto`,\n        marginRight: `auto`,\n        maxWidth: rhythm(24),\n        padding: `${rhythm(1.5)} ${rhythm(3 / 4)}`,\n      }}\n    >\n      <TypographyStyle typography={typography} />\n      <header>{header}</header>\n      <main>{children}</main>\n      <footer>\n        © {new Date().getFullYear()}, {author}{\" \"}\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n"],"names":["camelCase","input","options","Array","isArray","TypeError","Object","assign","pascalCase","x","map","trim","filter","length","join","toUpperCase","toLowerCase","string","isLastCharLower","isLastCharUpper","isLastLastCharUpper","i","character","test","slice","preserveCamelCase","replace","_","p1","m","charAt","module","exports","defineProperty","value","LARGER_DISPLAY_WIDTH","LARGE_DISPLAY_WIDTH","DEFAULT_WIDTH","TABLET_WIDTH","MOBILE_WIDTH","LARGER_DISPLAY_MEDIA_QUERY","LARGE_DISPLAY_MEDIA_QUERY","DEFAULT_MEDIA_QUERY","TABLET_MEDIA_QUERY","MOBILE_MEDIA_QUERY","MIN_LARGER_DISPLAY_MEDIA_QUERY","MIN_LARGE_DISPLAY_MEDIA_QUERY","MIN_DEFAULT_MEDIA_QUERY","MIN_TABLET_MEDIA_QUERY","MIN_MOBILE_MEDIA_QUERY","obj","_extends","target","arguments","source","key","prototype","hasOwnProperty","call","_grayPercentage","_grayPercentage2","__esModule","default","_typographyBreakpointConstants","_defineProperty","enumerable","configurable","writable","theme","title","baseFontSize","baseLineHeight","googleFonts","name","styles","headerFontFamily","bodyFontFamily","bodyColor","headerWeight","bodyWeight","boldWeight","overrideStyles","_ref","_ref2","adjustFontSizeTo","scale","rhythm","a","color","textDecoration","blockquote","fontStyle","paddingLeft","marginLeft","borderLeft","marginBottom","fontWeight","content","ul","listStyle","marginRight","h1","marginTop","letterSpacing","height","hasNativeLazyLoadSupport","HTMLImageElement","gatsbyImageIsInstalled","GATSBY___IMAGE","format","getMainProps","isLoading","isLoaded","images","loading","style","left","position","top","transform","transition","width","willChange","shouldLoad","opacity","getPlaceholderProps","placeholder","layout","backgroundColor","objectFit","objectPosition","wrapperStyle","bottom","right","result","output","fallbackImage","Sizer","React","paddingTop","maxWidth","display","alt","role","src","LayoutWrapper","children","props","Fragment","q","H","Image","srcSet","decoding","undefined","Picture","fallback","t","sources","sizes","media","type","propTypes","PropTypes","displayName","isRequired","Placeholder","_Picture$propTypes","propName","componentName","Error","MainImage","renderImageToStringPromise","renderImage","altValidator","rest","image","imageCache","Set","GatsbyImageHydrator","onError","as","className","preactClass","class","onStartLoad","onLoad","overflow","verticalAlign","wStyle","wClass","wrapperProps","root","useRef","cacheKey","useMemo","JSON","stringify","sizer","useEffect","import","then","renderImageToString","swapPlaceholderImage","animationFrame","cleanupCallback","ssrImage","current","querySelector","complete","wasCached","setTimeout","removeAttribute","document","addEventListener","onLoadListener","removeEventListener","add","has","innerHTML","requestAnimationFrame","cancelAnimationFrame","useLayoutEffect","createElement","ref","dangerouslySetInnerHTML","__html","suppressHydrationWarning","GatsbyImage","memo","warn","checkDimensionProps","validLayouts","StaticImage","GatsbyImageBrowser","__error","imageData","__imageData","console","boxShadow","typography","Typography","data","useStaticQuery","author","site","siteMetadata","G","avatar","childImageSharp","gatsbyImageData","minWidth","borderRadius","imgStyle","to","summary","header","location","pathname","fontFamily","padding","TypographyStyle","Date","getFullYear"],"sourceRoot":""}